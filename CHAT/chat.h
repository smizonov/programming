/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _CHAT_H_RPCGEN
#define _CHAT_H_RPCGEN

#include <rpc/rpc.h>
#include <iostream>
#include <iomanip>
#include <stdio.h>
#include <stdlib.h>
#include <sqlite3.h> 
#include <vector>
#include <string>
#define RESULT_DESCR_LEN 128
#define LOGIN_LEN 32
#define PASSWORD_LEN 32
#define MESSAGE_LEN 128

#ifdef __cplusplus
extern "C" {
#endif


enum result_code {
	FAIL = 0,
	OK = 1,
};
typedef enum result_code result_code;

struct result {
	result_code code;
	char *descr;
};
typedef struct result result;

struct send_params {
	char *to;
	int cookie;
	char *message;
};
typedef struct send_params send_params;

struct login_params {
	char *login;
	char *password;
};
typedef struct login_params login_params;

struct logout_params {
	int cookie;
};
typedef struct logout_params logout_params;

struct receive_params {
	int cookie;
};
typedef struct receive_params receive_params;

struct users_param {
	int cookie;
};
typedef struct users_param users_param;

struct register_params {
	char *login;
	char *password;
};
typedef struct register_params register_params;

struct login_result {
	result res;
	int cookie;
};
typedef struct login_result login_result;

struct receive_message {
	char *from;
	char *message;
};
typedef struct receive_message receive_message;

struct receive_result {
	result res;
	struct {
		u_int data_len;
		receive_message *data_val;
	} data;
};
typedef struct receive_result receive_result;

struct users_message {
	char *login;
	char *online;
};
typedef struct users_message users_message;

struct users_result {
	result res;
	struct {
		u_int data_len;
		users_message *data_val;
	} data;
};
typedef struct users_result users_result;

#define RPC_CHAT 0x20000001
#define RPC_CHAT_VERSION_2 2

#if defined(__STDC__) || defined(__cplusplus)
#define SEND 1
extern  result * send_2(send_params *, CLIENT *);
extern  result * send_2_svc(send_params *, struct svc_req *);
#define LOGIN 2
extern  login_result * login_2(login_params *, CLIENT *);
extern  login_result * login_2_svc(login_params *, struct svc_req *);
#define LOGOUT 3
extern  result * logout_2(logout_params *, CLIENT *);
extern  result * logout_2_svc(logout_params *, struct svc_req *);
#define RECEIVE 4
extern  receive_result * receive_2(receive_params *, CLIENT *);
extern  receive_result * receive_2_svc(receive_params *, struct svc_req *);
#define USERS 5
extern  users_result * users_2(users_param *, CLIENT *);
extern  users_result * users_2_svc(users_param *, struct svc_req *);
#define REGISTER 6
extern  result * register_2(register_params *, CLIENT *);
extern  result * register_2_svc(register_params *, struct svc_req *);
extern int rpc_chat_2_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define SEND 1
extern  result * send_2();
extern  result * send_2_svc();
#define LOGIN 2
extern  login_result * login_2();
extern  login_result * login_2_svc();
#define LOGOUT 3
extern  result * logout_2();
extern  result * logout_2_svc();
#define RECEIVE 4
extern  receive_result * receive_2();
extern  receive_result * receive_2_svc();
#define USERS 5
extern  users_result * users_2();
extern  users_result * users_2_svc();
#define REGISTER 6
extern  result * register_2();
extern  result * register_2_svc();
extern int rpc_chat_2_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_result_code (XDR *, result_code*);
extern  bool_t xdr_result (XDR *, result*);
extern  bool_t xdr_send_params (XDR *, send_params*);
extern  bool_t xdr_login_params (XDR *, login_params*);
extern  bool_t xdr_logout_params (XDR *, logout_params*);
extern  bool_t xdr_receive_params (XDR *, receive_params*);
extern  bool_t xdr_users_param (XDR *, users_param*);
extern  bool_t xdr_register_params (XDR *, register_params*);
extern  bool_t xdr_login_result (XDR *, login_result*);
extern  bool_t xdr_receive_message (XDR *, receive_message*);
extern  bool_t xdr_receive_result (XDR *, receive_result*);
extern  bool_t xdr_users_message (XDR *, users_message*);
extern  bool_t xdr_users_result (XDR *, users_result*);

#else /* K&R C */
extern bool_t xdr_result_code ();
extern bool_t xdr_result ();
extern bool_t xdr_send_params ();
extern bool_t xdr_login_params ();
extern bool_t xdr_logout_params ();
extern bool_t xdr_receive_params ();
extern bool_t xdr_users_param ();
extern bool_t xdr_register_params ();
extern bool_t xdr_login_result ();
extern bool_t xdr_receive_message ();
extern bool_t xdr_receive_result ();
extern bool_t xdr_users_message ();
extern bool_t xdr_users_result ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_CHAT_H_RPCGEN */
